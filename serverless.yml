# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Cognito-Dynamodb-Sync # NOTE: update this with your service name
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
custom:
  tableThroughputs:
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${opt:stage}, self:custom.tableThroughputs.default}
  userDepartmentsTableName: ${opt:stage}-UserDepartments
  Client:
      dev: '7v9e316ei5a250p59be4fh28fe'
      production: '7v9e316ei5a250p59be4fh28fe'
  userTable:
      dev: 'UsersDev'
      production: 'Users'
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: 'eu-central-1'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:  [
        "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/UsersDev",
        "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/UsersDev/index/*",
        "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/Users",
        "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/Users/index/*"
      ]
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "Fn::GetAtt": [ UserDepartmentsTable, Arn ]
        - "Fn::Join":
          - "/"
          -
            - {"Fn::GetAtt": [ UserDepartmentsTable, Arn ]}
            - "index/*"
    - Effect: "Allow"
      Action:
        - "states:StartExecution"
      Resource:
        - "*"
stepFunctions:
  stateMachines:
    cognitoSyncDynamodbFlow:
      name: cognitoSyncDynamodbFlow-${opt:stage}
      definition:
        Comment: "Sync User from Cognito to Dynamodb"
        StartAt: CognitoSyncDynamodb
        States:
          CognitoSyncDynamodb:
            Type: Task
            Resource: arn:aws:lambda:${opt:region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-syncCognitoToDynamodb
            Next: CognitoSyncUserDepartment
          CognitoSyncUserDepartment:
            Type: Task
            Resource: arn:aws:lambda:${opt:region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-syncUserDepartmentToDynamodb
            End: true

functions:
  postUserConfirm :
    handler: handler.postUserConfirm
    environment:
      statemachine_arn: ${self:resources.Outputs.CognitoSyncDynamodbFlow.Value}
      # clientId: ${self:custom.eHealthClient.${opt:stage}}
  syncCognitoToDynamodb:
    handler: handler.syncCognitoToDynamodb
    environment:
      userTable: ${self:custom.userTable.${opt:stage}}
  syncUserDepartmentToDynamodb:
    handler: handler.syncUserDepartmentToDynamodb
    environment:
      userDepartmentsTable: ${self:custom.userDepartmentsTableName}
resources:
  Resources:
    UserDepartmentsTable:
          Type: AWS::DynamoDB::Table
          Properties:
            TableName: ${self:custom.userDepartmentsTableName}
            AttributeDefinitions:
              - AttributeName: department
                AttributeType: S
            KeySchema:
              - AttributeName: department
                KeyType: HASH
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.tableThroughput}
              WriteCapacityUnits: ${self:custom.tableThroughput}
  Outputs:
    CognitoSyncDynamodbFlow:
      Description: The ARN of the state machine
      Value:
        Ref: CognitoSyncDynamodbFlowDash${opt:stage}